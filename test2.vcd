$date
	Fri Jun 03 17:14:49 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module SL2Add $end
$var wire 26 ! in26 [25:0] $end
$var wire 4 " in4 [3:0] $end
$var wire 32 # out32 [31:0] $end
$var reg 2 $ temp [1:0] $end
$upscope $end
$scope module muxtwo_4 $end
$var wire 5 % in1 [4:0] $end
$var wire 5 & in2 [4:0] $end
$var wire 5 ' out [4:0] $end
$var wire 1 ( sl $end
$upscope $end
$scope module testBench $end
$var reg 1 ) clk $end
$var reg 1 * rst $end
$scope module cpu $end
$var wire 1 + IFIDWrite $end
$var wire 1 , PCWrite $end
$var wire 32 - addBranchOut [31:0] $end
$var wire 32 . aluResult [31:0] $end
$var wire 4 / aluctrl [3:0] $end
$var wire 1 0 clk $end
$var wire 1 1 ctrlSetZero $end
$var wire 10 2 ctrlUnitOutCode [9:0] $end
$var wire 32 3 dmOutData [31:0] $end
$var wire 107 4 exmemOut [106:0] $end
$var wire 32 5 extSign32 [31:0] $end
$var wire 2 6 forwardA [1:0] $end
$var wire 2 7 forwardB [1:0] $end
$var wire 152 8 idexOut [151:0] $end
$var wire 64 9 ifidOut [63:0] $end
$var wire 32 : imOutData [31:0] $end
$var wire 71 ; memwbOut [70:0] $end
$var wire 32 < mt1Out [31:0] $end
$var wire 32 = mt2Out [31:0] $end
$var wire 32 > mw32Out [31:0] $end
$var wire 32 ? mw32_memOut [31:0] $end
$var wire 5 @ mw5Out [4:0] $end
$var wire 9 A mw9Out [8:0] $end
$var wire 32 B pcInputAddr [31:0] $end
$var wire 32 C pcOutAddr [31:0] $end
$var wire 32 D pcPlus4 [31:0] $end
$var wire 32 E reg1Data [31:0] $end
$var wire 32 F reg2Data [31:0] $end
$var wire 1 G rst $end
$var wire 1 H zero $end
$scope module mw32_pc $end
$var wire 32 I in1 [31:0] $end
$var wire 32 J in2 [31:0] $end
$var wire 32 K out [31:0] $end
$var wire 1 L sl $end
$upscope $end
$scope module pc $end
$var wire 1 , PCWrite $end
$var wire 1 0 clk $end
$var wire 32 M inAddr [31:0] $end
$var wire 1 G rst $end
$var reg 32 N outAddr [31:0] $end
$upscope $end
$scope module add4 $end
$var wire 32 O inAddr [31:0] $end
$var wire 32 P outAddr [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 Q inAddr [31:0] $end
$var wire 32 R outContent [31:0] $end
$upscope $end
$scope module ifid $end
$var wire 1 + IFIDWrite $end
$var wire 32 S addr4 [31:0] $end
$var wire 1 0 clk $end
$var wire 32 T ins [31:0] $end
$var wire 1 G rst $end
$var reg 64 U out [63:0] $end
$upscope $end
$scope module hazardCheck $end
$var wire 1 V EXMEMRead $end
$var wire 5 W EXMEMRt [4:0] $end
$var wire 1 X IDEXMemRead $end
$var wire 5 Y IDEXRd [4:0] $end
$var wire 1 Z IDEXRegWrite $end
$var wire 5 [ IDEXRt [4:0] $end
$var wire 5 \ IFIDRs [4:0] $end
$var wire 5 ] IFIDRt [4:0] $end
$var wire 6 ^ opcode [5:0] $end
$var reg 1 _ IFIDWrite $end
$var reg 1 ` PCWrite $end
$var reg 1 a ctrlSetZero $end
$upscope $end
$scope module controlunit $end
$var wire 1 b clk $end
$var wire 6 c inCode [5:0] $end
$var wire 10 d outCode [9:0] $end
$var reg 10 e result [9:0] $end
$upscope $end
$scope module mw9 $end
$var wire 9 f in1 [8:0] $end
$var wire 9 g in2 [8:0] $end
$var wire 9 h out [8:0] $end
$var wire 1 1 sl $end
$upscope $end
$scope module signext $end
$var wire 16 i in1 [15:0] $end
$var wire 32 j out [31:0] $end
$var wire 16 k temp [15:0] $end
$upscope $end
$scope module regHeap $end
$var wire 1 0 clk $end
$var wire 5 l readReg1 [4:0] $end
$var wire 5 m readReg2 [4:0] $end
$var wire 32 n reg1Data [31:0] $end
$var wire 32 o reg2Data [31:0] $end
$var wire 1 p regWrite $end
$var wire 32 q writeData [31:0] $end
$var wire 5 r writeReg [4:0] $end
$upscope $end
$scope module idex $end
$var wire 32 s add4 [31:0] $end
$var wire 1 0 clk $end
$var wire 4 t ex [3:0] $end
$var wire 3 u m [2:0] $end
$var wire 5 v rd [4:0] $end
$var wire 32 w readData1 [31:0] $end
$var wire 32 x readData2 [31:0] $end
$var wire 5 y rs [4:0] $end
$var wire 1 G rst $end
$var wire 5 z rt [4:0] $end
$var wire 32 { signExt [31:0] $end
$var wire 2 | wb [1:0] $end
$var reg 152 } out [151:0] $end
$upscope $end
$scope module swapUnit $end
$var wire 1 ~ EXMEMregWrite $end
$var wire 5 !" EXMEMregisterRd [4:0] $end
$var wire 1 "" MEMWBregWrite $end
$var wire 5 #" MEMWBregisterRd [4:0] $end
$var wire 5 $" rd [4:0] $end
$var wire 5 %" rs [4:0] $end
$var wire 1 G rst $end
$var wire 5 &" rt [4:0] $end
$var reg 2 '" forwardA [1:0] $end
$var reg 2 (" forwardB [1:0] $end
$upscope $end
$scope module mt1 $end
$var wire 32 )" in1 [31:0] $end
$var wire 32 *" in2 [31:0] $end
$var wire 32 +" in3 [31:0] $end
$var wire 2 ," sl [1:0] $end
$var reg 32 -" out [31:0] $end
$upscope $end
$scope module mt2 $end
$var wire 32 ." in1 [31:0] $end
$var wire 32 /" in2 [31:0] $end
$var wire 32 0" in3 [31:0] $end
$var wire 2 1" sl [1:0] $end
$var reg 32 2" out [31:0] $end
$upscope $end
$scope module addBranch $end
$var wire 32 3" inAddr_add [31:0] $end
$var wire 32 4" inAddr_sl2 [31:0] $end
$var wire 32 5" outAddr [31:0] $end
$upscope $end
$scope module mw32 $end
$var wire 32 6" in1 [31:0] $end
$var wire 32 7" in2 [31:0] $end
$var wire 32 8" out [31:0] $end
$var wire 1 9" sl $end
$upscope $end
$scope module aluControl $end
$var wire 2 :" aluop [1:0] $end
$var wire 1 ;" clk $end
$var wire 6 <" func [5:0] $end
$var reg 4 =" aluctrl [3:0] $end
$upscope $end
$scope module alu $end
$var wire 1 >" clk $end
$var wire 4 ?" ctrl [3:0] $end
$var wire 32 @" in1 [31:0] $end
$var wire 32 A" in2 [31:0] $end
$var wire 32 B" out [31:0] $end
$var reg 32 C" result [31:0] $end
$var reg 1 D" zero $end
$upscope $end
$scope module mw5 $end
$var wire 5 E" in1 [4:0] $end
$var wire 5 F" in2 [4:0] $end
$var wire 5 G" out [4:0] $end
$var wire 1 H" sl $end
$upscope $end
$scope module exmem $end
$var wire 32 I" addBranch [31:0] $end
$var wire 32 J" aluResult [31:0] $end
$var wire 1 H aluZero $end
$var wire 1 0 clk $end
$var wire 3 K" m [2:0] $end
$var wire 5 L" mw5Out [4:0] $end
$var wire 32 M" readData2 [31:0] $end
$var wire 1 G rst $end
$var wire 2 N" wb [1:0] $end
$var reg 107 O" out [106:0] $end
$upscope $end
$scope module dm $end
$var wire 1 0 clk $end
$var wire 32 P" inAddr [31:0] $end
$var wire 1 Q" memRead $end
$var wire 1 R" memWrite $end
$var wire 32 S" outData [31:0] $end
$var wire 32 T" writeData [31:0] $end
$upscope $end
$scope module memwb $end
$var wire 32 U" aluResult [31:0] $end
$var wire 1 0 clk $end
$var wire 32 V" readData [31:0] $end
$var wire 1 G rst $end
$var wire 5 W" rtd [4:0] $end
$var wire 2 X" wb [1:0] $end
$var reg 71 Y" out [70:0] $end
$upscope $end
$scope module mw32_mem $end
$var wire 32 Z" in1 [31:0] $end
$var wire 32 [" in2 [31:0] $end
$var wire 32 \" out [31:0] $end
$var wire 1 ]" sl $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
0R"
0Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
0H"
b0 G"
b0 F"
b0 E"
1D"
b0 C"
b0 B"
b0 A"
b0 @"
b10 ?"
z>"
b10 ="
b0 <"
z;"
b0 :"
09"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
0""
b0 !"
0~
b0 }
b1 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b110 t
b0 s
b0 r
b0 q
0p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b100100010 h
b0 g
b100100010 f
b100100010 e
b100100010 d
b0 c
zb
0a
1`
1_
b0 ^
b0 ]
b0 \
b0 [
0Z
b0 Y
0X
b0 W
0V
b0 U
b10001101000010010000000000000000 T
b11000000000100 S
b10001101000010010000000000000000 R
b11000000000000 Q
b11000000000100 P
b11000000000000 O
b11000000000000 N
b11000000000100 M
0L
b11000000000100 K
b0 J
b11000000000100 I
1H
1G
b0 F
b0 E
b11000000000100 D
b11000000000000 C
b11000000000100 B
b100100010 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b10001101000010010000000000000000 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b100100010 2
01
10
b10 /
b0 .
b0 -
1,
1+
1*
1)
z(
bz '
bz &
bz %
b0 $
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzz00 #
bz "
bz !
$end
#10
0)
00
#20
b1000 t
b10 u
b11110000 A
b11110000 h
b11000000001000 B
b11000000001000 K
b11000000001000 M
b11 |
b11110000 f
b11000000001000 D
b11000000001000 I
b11000000001000 P
b11000000001000 S
b11110000 e
b11110000 2
b11110000 d
b0 ="
b0 /
b0 ?"
b11000000000100 N
b1111011110111100000100000 :
b1111011110111100000100000 R
b1111011110111100000100000 T
b11000000000100 C
b11000000000100 O
b11000000000100 Q
b1001 z
b11000000000100 s
b1000 y
b1001 m
b1000 l
b100011 c
b100011 ^
b1001 ]
b1000 \
b1 N"
1H"
b10 :"
1Z
b1100000000010010001101000010010000000000000000 U
b1100000000010010001101000010010000000000000000 9
b10000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 }
b10000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 8
b1000000000000000000000000000000000000000000000000000000000000000000000 O"
b1000000000000000000000000000000000000000000000000000000000000000000000 4
1)
10
0*
0G
#30
0)
00
#40
b110 t
b0 u
b100100010 A
b100100010 h
b1 |
b100100010 f
b100100010 e
b100100010 2
b100100010 d
b10 ="
b10 /
b10 ?"
b1001 @
b1001 G"
b1001 L"
b11000000001100 B
b11000000001100 K
b11000000001100 M
b1111 v
b1111 z
b11000000001000 s
b1111 y
b1111 m
b1111 l
b111100000100000 i
b111100000100000 5
b111100000100000 j
b111100000100000 {
b0 c
b0 ^
b1111 ]
b1111 \
b10 K"
b11 N"
0H"
b1001 E"
b0 :"
19"
b11000000000100 3"
b11000000000100 -
b11000000000100 5"
b11000000000100 I"
b1001 &"
b1000 %"
b1001 [
1X
b1 X"
1~
b11000000001100 D
b11000000001100 I
b11000000001100 P
b11000000001100 S
b1100000000100000000001111011110111100000100000 U
b1100000000100000000001111011110111100000100000 9
b1000110101000000000000000000000110000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100000 }
b1000110101000000000000000000000110000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100000 8
b1000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000 O"
b1000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000 4
b11000000001000 N
b11000000001000 C
b11000000001000 O
b11000000001000 Q
1)
10
#50
0)
00
#60
b1 3
b1 S"
b1 V"
b1111 @
b1111 G"
b1111 L"
b11000000010000 B
b11000000010000 K
b11000000010000 M
1""
1p
b1001 W"
b11 X"
1Q"
b1001 !"
b1001 W
1V
b11000000000100 J
b0 K"
b1 N"
1H"
b1111 F"
b1111 E"
b10 :"
b100000 <"
09"
b111100000100000 7"
b11110000010000000 4"
b11000000001000 3"
b100001000010001000 -
b100001000010001000 5"
b100001000010001000 I"
b1111 $"
b1111 &"
b1111 %"
b1111 Y
b1111 [
0X
b11000000001100 s
b11000000010000 D
b11000000010000 I
b11000000010000 P
b11000000010000 S
b1000000000000000000000000000000000000000000000000000000000000000000000 Y"
b1000000000000000000000000000000000000000000000000000000000000000000000 ;
b11010000000000000000000110000000001001000000000000000000000000000000000000000000000000000000000000000001001 O"
b11010000000000000000000110000000001001000000000000000000000000000000000000000000000000000000000000000001001 4
b1111010000110000000000000000000110000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000001000000111101111 }
b1111010000110000000000000000000110000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000001000000111101111 8
b1100000000110000000001111011110111100000100000 U
b1100000000110000000001111011110111100000100000 9
b11000000001100 N
b10001101000010100000000000000100 :
b10001101000010100000000000000100 R
b10001101000010100000000000000100 T
b11000000001100 C
b11000000001100 O
b11000000001100 Q
1)
10
#70
0)
00
#80
b1000 t
b10 u
b11110000 A
b11110000 h
b11 |
b11110000 f
b11110000 e
b11110000 2
b11110000 d
b10 ("
b10 7
b10 1"
b10 '"
b10 6
b10 ,"
b0 3
b0 S"
b0 V"
b1 ?
b1 q
b1 *"
b1 /"
b1 \"
b11000000010100 B
b11000000010100 K
b11000000010100 M
b0 v
b1010 z
b11000000010000 s
b1000 y
b1010 m
b1000 l
b100 i
b100 5
b100 j
b100 {
b100011 c
b100011 ^
b1010 ]
b1000 \
b11000000001100 3"
b100001000010001100 -
b100001000010001100 5"
b100001000010001100 I"
b1111 W"
b1 X"
0Q"
b1111 !"
b1111 W
0V
b100001000010001000 J
1]"
b1 ["
b1001 #"
b1001 r
b11000000010100 D
b11000000010100 I
b11000000010100 P
b11000000010100 S
b1100000001000010001101000010100000000000000100 U
b1100000001000010001101000010100000000000000100 9
b1111010000110000000000000000000110000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000001000000111101111 }
b1111010000110000000000000000000110000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000001000000111101111 8
b1000000000000000001000010000100010001000000000000000000000000000000000000000000000000000000000000000001111 O"
b1000000000000000001000010000100010001000000000000000000000000000000000000000000000000000000000000000001111 4
b11000000000000000000000000000000010000000000000000000000000000000001001 Y"
b11000000000000000000000000000000010000000000000000000000000000000001001 ;
b11000000010000 N
b10001001010100000000000000001 :
b10001001010100000000000000001 R
b10001001010100000000000000001 T
b11000000010000 C
b11000000010000 O
b11000000010000 Q
1)
10
#90
0)
00
#100
b0 t
b0 u
b0 |
b101 f
b0 A
b0 h
b0 ("
b0 7
b0 1"
b0 '"
b0 6
b0 ,"
b101 e
b101 2
b101 d
1a
11
0_
0+
0`
0,
0D"
0H
b100 C"
b100 .
b100 B"
b100 J"
b0 ?
b0 q
b0 *"
b0 /"
b0 \"
b1010 @
b1010 G"
b1010 L"
b100 >
b100 8"
b100 A"
b11000000011000 B
b11000000011000 K
b11000000011000 M
0]"
b0 ["
b1111 #"
b1111 r
b100001000010001100 J
b10 K"
b11 N"
0H"
b0 F"
b1010 E"
b0 :"
b100 <"
19"
b100 7"
b10000 4"
b11000000010000 3"
b11000000100000 -
b11000000100000 5"
b11000000100000 I"
b0 $"
b1010 &"
b1000 %"
b0 Y
b1010 [
1X
b11000000010100 s
b1001 y
b1001 l
b1 E
b1 n
b1 w
b1 i
b1 5
b1 j
b1 {
b100 c
b100 ^
b1001 \
b11000000011000 D
b11000000011000 I
b11000000011000 P
b11000000011000 S
b1000000000000000000000000000000000000000000000000000000000000000001111 Y"
b1000000000000000000000000000000000000000000000000000000000000000001111 ;
b1000000000000000001000010000100011001000000000000000000000000000000000000000000000000000000000000000001111 O"
b1000000000000000001000010000100011001000000000000000000000000000000000000000000000000000000000000000001111 4
b1000110101000000000000000000000110000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000101000000 }
b1000110101000000000000000000000110000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000101000000 8
b1100000001010000010001001010100000000000000001 U
b1100000001010000010001001010100000000000000001 9
b11000000010100 N
b1111011110111100000100000 :
b1111011110111100000100000 R
b1111011110111100000100000 T
b11000000010100 C
b11000000010100 O
b11000000010100 Q
1)
10
#110
0)
00
#120
b100 2"
b100 =
b100 6"
1a
11
0_
0+
0`
0,
b1 -"
b1 <
b1 @"
b10 ("
b10 7
b10 1"
0D"
0H
b101 C"
b101 .
b101 B"
b101 J"
b100 >
b100 8"
b100 A"
b10 3
b10 S"
b10 V"
b0 K"
b0 N"
b1 <"
09"
b1 7"
b100 4"
b11000000010100 3"
b11000000011000 -
b11000000011000 5"
b11000000011000 I"
b1 )"
b1001 %"
0Z
0X
b1010 W"
b100 U"
b11 X"
1Q"
b100 P"
b100 0"
b100 +"
b1010 !"
b1010 W
1V
b11000000100000 J
b1001000000000000000000000000000110000000101000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101000000 }
b1001000000000000000000000000000110000000101000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010101000000 8
b11010000000000000000000110000001000000000000000000000000000000000001000000000000000000000000000000000001010 O"
b11010000000000000000000110000001000000000000000000000000000000000001000000000000000000000000000000000001010 4
1)
10
#130
0)
00
#140
b11 C"
b11 .
b11 B"
b11 J"
b10 >
b10 8"
b10 A"
b10 F
b10 o
b10 x
b10 2"
b10 =
b10 6"
b1 ("
b1 7
b1 1"
b10 ?
b10 q
b10 *"
b10 /"
b10 \"
b0 3
b0 S"
b0 V"
1]"
b10 ["
b100 Z"
b1010 #"
b1010 r
b101 U"
b0 X"
0Q"
b101 P"
b101 0"
b101 +"
0~
0V
b11000000011000 J
b11000000000000000000000000000000100000000000000000000000000000010001010 Y"
b11000000000000000000000000000000100000000000000000000000000000010001010 ;
b110000000110000000000000000000000000000000001010000000000000000000000000000000001010 O"
b110000000110000000000000000000000000000000001010000000000000000000000000000000001010 4
1)
10
#150
0)
00
#160
b11 C"
b11 .
b11 B"
b11 J"
b10 >
b10 8"
b10 A"
b10 2"
b10 =
b10 6"
b0 ("
b0 7
b0 1"
b101 ?
b101 q
b101 *"
b101 /"
b101 \"
b10 M"
b10 ."
b11 U"
b11 P"
b11 0"
b11 +"
0]"
b0 ["
b101 Z"
0""
0p
b1001000000000000000000000000000110000000101000000000000000000000000000000000100000000000000000000000000000010000000000000000000000000000000010101000000 }
b1001000000000000000000000000000110000000101000000000000000000000000000000000100000000000000000000000000000010000000000000000000000000000000010101000000 8
b110000000110000000000000000000000000000000000110000000000000000000000000000000001010 O"
b110000000110000000000000000000000000000000000110000000000000000000000000000000001010 4
b10101010 Y"
b10101010 ;
1)
10
#170
0)
00
#180
b11 ?
b11 q
b11 *"
b11 /"
b11 \"
b11 Z"
b10 T"
b1101010 Y"
b1101010 ;
b110000000110000000000000000000000000000000000110000000000000000000000000000001001010 O"
b110000000110000000000000000000000000000000000110000000000000000000000000000001001010 4
1)
10
#190
0)
00
#200
1)
10
#210
0)
00
#220
1)
10
#230
0)
00
#240
1)
10
#250
0)
00
#260
1)
10
#270
0)
00
#280
1)
10
#290
0)
00
#300
1)
10
#310
0)
00
#320
1)
10
#330
0)
00
#340
1)
10
#350
0)
00
#360
1)
10
#370
0)
00
#380
1)
10
#390
0)
00
#400
1)
10
#410
0)
00
#420
1)
10
#430
0)
00
#440
1)
10
#450
0)
00
#460
1)
10
#470
0)
00
#480
1)
10
#490
0)
00
#500
1)
10
#510
0)
00
#520
1)
10
