$date
	Tue May 31 21:09:17 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module SL2Add $end
$var wire 26 ! in26 [25:0] $end
$var wire 4 " in4 [3:0] $end
$var wire 32 # out32 [31:0] $end
$var reg 2 $ temp [1:0] $end
$upscope $end
$scope module muxtwo_4 $end
$var wire 5 % in1 [4:0] $end
$var wire 5 & in2 [4:0] $end
$var wire 5 ' out [4:0] $end
$var wire 1 ( sl $end
$upscope $end
$scope module testBench $end
$var reg 1 ) clk $end
$scope module cpu $end
$var wire 32 * addBranchOut [31:0] $end
$var wire 32 + aluResult [31:0] $end
$var wire 4 , aluctrl [3:0] $end
$var wire 1 - clk $end
$var wire 10 . ctrlUnitOutCode [9:0] $end
$var wire 32 / dmOutData [31:0] $end
$var wire 107 0 exmemOut [106:0] $end
$var wire 32 1 extSign32 [31:0] $end
$var wire 147 2 idexOut [146:0] $end
$var wire 64 3 ifidOut [63:0] $end
$var wire 32 4 imOutData [31:0] $end
$var wire 71 5 memwbOut [70:0] $end
$var wire 32 6 mw32Out [31:0] $end
$var wire 32 7 mw32_memOut [31:0] $end
$var wire 5 8 mw5Out [4:0] $end
$var wire 32 9 pcInputAddr [31:0] $end
$var wire 32 : pcOutAddr [31:0] $end
$var wire 32 ; pcPlus4 [31:0] $end
$var wire 32 < reg1Data [31:0] $end
$var wire 32 = reg2Data [31:0] $end
$var wire 1 > rst $end
$var wire 1 ? zero $end
$scope module mw32_pc $end
$var wire 32 @ in1 [31:0] $end
$var wire 32 A in2 [31:0] $end
$var wire 32 B out [31:0] $end
$var wire 1 C sl $end
$upscope $end
$scope module pc $end
$var wire 1 - clk $end
$var wire 32 D inAddr [31:0] $end
$var wire 1 > rst $end
$var reg 32 E con [31:0] $end
$var reg 32 F outAddr [31:0] $end
$upscope $end
$scope module add4 $end
$var wire 32 G inAddr [31:0] $end
$var wire 32 H outAddr [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 I inAddr [31:0] $end
$var wire 32 J outContent [31:0] $end
$upscope $end
$scope module ifid $end
$var wire 32 K addr4 [31:0] $end
$var wire 1 - clk $end
$var wire 32 L ins [31:0] $end
$var wire 64 M out [63:0] $end
$var wire 1 > rst $end
$var reg 64 N con [63:0] $end
$upscope $end
$scope module controlunit $end
$var wire 1 O clk $end
$var wire 6 P inCode [5:0] $end
$var wire 10 Q outCode [9:0] $end
$var reg 10 R result [9:0] $end
$upscope $end
$scope module signext $end
$var wire 16 S in1 [15:0] $end
$var wire 32 T out [31:0] $end
$var wire 16 U temp [15:0] $end
$upscope $end
$scope module regHeap $end
$var wire 1 - clk $end
$var wire 5 V readReg1 [4:0] $end
$var wire 5 W readReg2 [4:0] $end
$var wire 32 X reg1Data [31:0] $end
$var wire 32 Y reg2Data [31:0] $end
$var wire 1 Z regWrite $end
$var wire 32 [ writeData [31:0] $end
$var wire 5 \ writeReg [4:0] $end
$upscope $end
$scope module idex $end
$var wire 32 ] add4 [31:0] $end
$var wire 1 - clk $end
$var wire 4 ^ ex [3:0] $end
$var wire 3 _ m [2:0] $end
$var wire 5 ` rd [4:0] $end
$var wire 32 a readData1 [31:0] $end
$var wire 32 b readData2 [31:0] $end
$var wire 1 > rst $end
$var wire 5 c rt [4:0] $end
$var wire 32 d signExt [31:0] $end
$var wire 2 e wb [1:0] $end
$var reg 147 f out [146:0] $end
$upscope $end
$scope module addBranch $end
$var wire 32 g inAddr_add [31:0] $end
$var wire 32 h inAddr_sl2 [31:0] $end
$var wire 32 i outAddr [31:0] $end
$upscope $end
$scope module mw32 $end
$var wire 32 j in1 [31:0] $end
$var wire 32 k in2 [31:0] $end
$var wire 32 l out [31:0] $end
$var wire 1 m sl $end
$upscope $end
$scope module aluControl $end
$var wire 2 n aluop [1:0] $end
$var wire 1 o clk $end
$var wire 6 p func [5:0] $end
$var reg 4 q aluctrl [3:0] $end
$upscope $end
$scope module alu $end
$var wire 1 r clk $end
$var wire 4 s ctrl [3:0] $end
$var wire 32 t in1 [31:0] $end
$var wire 32 u in2 [31:0] $end
$var wire 32 v out [31:0] $end
$var reg 32 w result [31:0] $end
$var reg 1 x zero $end
$upscope $end
$scope module mw5 $end
$var wire 5 y in1 [4:0] $end
$var wire 5 z in2 [4:0] $end
$var wire 5 { out [4:0] $end
$var wire 1 | sl $end
$upscope $end
$scope module exmem $end
$var wire 32 } addBranch [31:0] $end
$var wire 32 ~ aluResult [31:0] $end
$var wire 1 ? aluZero $end
$var wire 1 - clk $end
$var wire 3 !" m [2:0] $end
$var wire 5 "" mw5Out [4:0] $end
$var wire 32 #" readData2 [31:0] $end
$var wire 1 > rst $end
$var wire 2 $" wb [1:0] $end
$var reg 107 %" out [106:0] $end
$upscope $end
$scope module dm $end
$var wire 1 - clk $end
$var wire 32 &" inAddr [31:0] $end
$var wire 1 '" memRead $end
$var wire 1 (" memWrite $end
$var wire 32 )" outData [31:0] $end
$var wire 32 *" writeData [31:0] $end
$upscope $end
$scope module memwb $end
$var wire 32 +" aluResult [31:0] $end
$var wire 1 - clk $end
$var wire 32 ," readData [31:0] $end
$var wire 1 > rst $end
$var wire 5 -" rtd [4:0] $end
$var wire 2 ." wb [1:0] $end
$var reg 71 /" out [70:0] $end
$upscope $end
$scope module mw32_mem $end
$var wire 32 0" in1 [31:0] $end
$var wire 32 1" in2 [31:0] $end
$var wire 32 2" out [31:0] $end
$var wire 1 3" sl $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
x("
x'"
bx &"
bx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
x|
bx {
bx z
bx y
xx
bx w
bx v
bx u
bx t
b0 s
zr
b0 q
bx p
zo
bx n
xm
bx l
bx k
bx j
bx i
bx h
bx g
bx f
b1 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b110 ^
b0 ]
bx \
bx [
xZ
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b100100010 R
b100100010 Q
b0 P
zO
b0 N
b0 M
b10001101000010010000000000000100 L
b11000000000100 K
b10001101000010010000000000000100 J
b11000000000000 I
b11000000000100 H
b11000000000000 G
b11000000000000 F
b11000000000000 E
b11000000000100 D
0C
b11000000000100 B
bx A
b11000000000100 @
x?
0>
b0 =
b0 <
b11000000000100 ;
b11000000000000 :
b11000000000100 9
bx 8
bx 7
bx 6
bx 5
b10001101000010010000000000000100 4
b0 3
bx 2
b0 1
bx0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 0
bx /
b100100010 .
1-
b0 ,
bx +
bx *
1)
z(
bz '
bz &
bz %
b0 $
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzz00 #
bz "
bz !
$end
#1
b11000000000100 E
#10
0)
0-
#20
b11000000001000 ;
b11000000001000 @
b11000000001000 H
b11000000001000 K
b11000000000100 F
b10001101000010100000000000000000 4
b10001101000010100000000000000000 J
b10001101000010100000000000000000 L
b11000000000100 :
b11000000000100 G
b11000000000100 I
bx 9
bx B
bx D
xC
b0 8
b0 {
b0 ""
1x
1?
b0 w
b0 +
b0 v
b0 ~
b0 6
b0 l
b0 u
b1000 ^
b10 _
b11 e
b0 #"
b0 !"
b1 $"
1|
b0 z
b0 y
b0 t
b10 n
b0 p
0m
b0 k
b0 j
b0 h
b0 *
b0 i
b0 }
b0 g
b11110000 R
b11110000 .
b11110000 Q
bx %"
bx 0
b10000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 f
b10000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 2
b1001 c
b11000000000100 ]
b1001 W
b1000 V
b100 S
b100 1
b100 T
b100 d
b100011 P
b1100000000010010001101000010010000000000000100 N
b1100000000010010001101000010010000000000000100 3
b1100000000010010001101000010010000000000000100 M
1)
1-
#21
bx E
#30
0)
0-
#40
0x
0?
b100 w
b100 +
b100 v
b100 ~
b10 q
b10 ,
b10 s
bx ;
bx @
bx H
bx K
bx F
bx 4
bx J
bx L
bx :
bx G
bx I
b1001 8
b1001 {
b1001 ""
b100 6
b100 l
b100 u
b0 /
b0 )"
b0 ,"
0C
bx 9
bx B
bx D
b10 !"
b11 $"
0|
b1001 y
b0 n
b100 p
1m
b100 k
b10000 h
b11000000000100 g
b11000000010100 *
b11000000010100 i
b11000000010100 }
b0 -"
b0 +"
b1 ."
0("
0'"
b0 *"
b0 &"
b0 \
b0 A
b110101000000000000000000000110000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100100000 f
b110101000000000000000000000110000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100100000 2
b1000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000 %"
b1000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000 0
b1010 c
b11000000001000 ]
b1010 W
b0 S
b0 1
b0 T
b0 d
b1100000000100010001101000010100000000000000000 N
b1100000000100010001101000010100000000000000000 3
b1100000000100010001101000010100000000000000000 M
1)
1-
#50
0)
0-
#60
1x
1?
b0 w
b0 +
b0 v
b0 ~
b0 7
b0 [
b0 2"
b10 /
b10 )"
b10 ,"
b1010 8
b1010 {
b1010 ""
b0 6
b0 l
b0 u
b0 ^
b0 _
b0 e
03"
b0 1"
b0 0"
1Z
b1001 -"
b11 ."
1'"
b100 &"
b1001 \
b11000000010100 A
b1010 y
b0 p
b0 k
b0 h
b11000000001000 g
b11000000001000 *
b11000000001000 i
b11000000001000 }
b0 R
b0 .
b0 Q
b1000000000000000000000000000000000000000000000000000000000000000000000 /"
b1000000000000000000000000000000000000000000000000000000000000000000000 5
b11010000000000000000000110000000101000000000000000000000000000000001000000000000000000000000000000000001001 %"
b11010000000000000000000110000000101000000000000000000000000000000001000000000000000000000000000000000001001 0
b110101000000000000000000000110000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000 f
b110101000000000000000000000110000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000 2
bx U
bx `
bx c
bx ]
bx W
bx =
bx Y
bx b
bx V
bx <
bx X
bx a
bx S
bx 1
bx T
bx d
bx P
bx N
bx 3
bx M
1)
1-
#70
0)
0-
#80
bx 8
bx {
bx ""
xx
x?
bx w
bx +
bx v
bx ~
bx 6
bx l
bx u
b1 /
b1 )"
b1 ,"
b10 7
b10 [
b10 2"
bx #"
b0 !"
b0 $"
bx z
bx y
bx t
bx p
0m
bx k
bx j
bx h
bx g
bx *
bx i
bx }
b1010 -"
b0 &"
b1010 \
b11000000001000 A
13"
b10 1"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx f
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2
b11010000000000000000000110000000010001000000000000000000000000000000000000000000000000000000000000000001010 %"
b11010000000000000000000110000000010001000000000000000000000000000000000000000000000000000000000000000001010 0
b11000000000000000000000000000000100000000000000000000000000000000001001 /"
b11000000000000000000000000000000100000000000000000000000000000000001001 5
1)
1-
#90
0)
0-
#100
b1 7
b1 [
b1 2"
b0 /
b0 )"
b0 ,"
b1 1"
bx -"
bx +"
b0 ."
0'"
bx *"
bx &"
bx \
bx A
b11000000000000000000000000000000010000000000000000000000000000000001010 /"
b11000000000000000000000000000000010000000000000000000000000000000001010 5
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 0
1)
1-
#110
0)
0-
#120
bx 7
bx [
bx 2"
03"
b0 1"
bx 0"
0Z
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 5
1)
1-
#130
0)
0-
#140
1)
1-
#150
0)
0-
#160
1)
1-
#170
0)
0-
#180
1)
1-
#190
0)
0-
#200
1)
1-
#210
0)
0-
#220
1)
1-
#230
0)
0-
#240
1)
1-
#250
0)
0-
#260
1)
1-
#270
0)
0-
#280
1)
1-
#290
0)
0-
#300
1)
1-
#310
0)
0-
#320
1)
1-
#330
0)
0-
#340
1)
1-
#350
0)
0-
#360
1)
1-
#370
0)
0-
#380
1)
1-
#390
0)
0-
#400
1)
1-
#410
0)
0-
#420
1)
1-
#430
0)
0-
#440
1)
1-
#450
0)
0-
#460
1)
1-
#470
0)
0-
#480
1)
1-
#490
0)
0-
#500
1)
1-
