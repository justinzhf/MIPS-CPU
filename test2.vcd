$date
	Mon May 30 22:55:47 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ALU $end
$var wire 1 ! clk $end
$var wire 4 " ctrl [3:0] $end
$var wire 32 # in1 [31:0] $end
$var wire 32 $ in2 [31:0] $end
$var wire 32 % out [31:0] $end
$var reg 32 & result [31:0] $end
$var reg 1 ' zero $end
$upscope $end
$scope module ALUControl $end
$var wire 2 ( aluop [1:0] $end
$var wire 1 ) clk $end
$var wire 6 * func [5:0] $end
$var reg 4 + aluctrl [3:0] $end
$upscope $end
$scope module DM $end
$var wire 1 , clk $end
$var wire 32 - inAddr [31:0] $end
$var wire 1 . memRead $end
$var wire 1 / memWrite $end
$var wire 32 0 outData [31:0] $end
$var wire 32 1 writeData [31:0] $end
$upscope $end
$scope module EXMEM $end
$var wire 32 2 addBranch [31:0] $end
$var wire 32 3 aluResult [31:0] $end
$var wire 1 4 aluZero $end
$var wire 1 5 clk $end
$var wire 32 6 readData2 [31:0] $end
$var wire 1 7 rst $end
$var reg 97 8 out [96:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 9 aluResult [31:0] $end
$var wire 1 : clk $end
$var wire 32 ; readData [31:0] $end
$var wire 1 < rst $end
$var reg 64 = out [63:0] $end
$upscope $end
$scope module SL2Add $end
$var wire 26 > in26 [25:0] $end
$var wire 4 ? in4 [3:0] $end
$var wire 32 @ out32 [31:0] $end
$var reg 2 A temp [1:0] $end
$upscope $end
$scope module muxtwo_32 $end
$var wire 32 B in1 [31:0] $end
$var wire 32 C in2 [31:0] $end
$var wire 32 D out [31:0] $end
$var wire 1 E sl $end
$upscope $end
$scope module muxtwo_4 $end
$var wire 5 F in1 [4:0] $end
$var wire 5 G in2 [4:0] $end
$var wire 5 H out [4:0] $end
$var wire 1 I sl $end
$upscope $end
$scope module testBench $end
$var reg 1 J clk $end
$scope module cpu $end
$var wire 32 K addBranchOut [31:0] $end
$var wire 1 L clk $end
$var wire 10 M ctrlUnitOutCode [9:0] $end
$var wire 32 N extSign32 [31:0] $end
$var wire 147 O idexOut [146:0] $end
$var wire 64 P ifidOut [63:0] $end
$var wire 32 Q imOutData [31:0] $end
$var wire 32 R pcInputAddr [31:0] $end
$var wire 32 S pcOutAddr [31:0] $end
$var wire 32 T pcPlus4 [31:0] $end
$var wire 32 U reg1Data [31:0] $end
$var wire 32 V reg2Data [31:0] $end
$var wire 1 W rst $end
$var wire 32 X writeData [31:0] $end
$var wire 5 Y writeReg [4:0] $end
$scope module pc $end
$var wire 1 L clk $end
$var wire 32 Z inAddr [31:0] $end
$var wire 1 W rst $end
$var reg 32 [ con [31:0] $end
$var reg 32 \ outAddr [31:0] $end
$upscope $end
$scope module add4 $end
$var wire 32 ] inAddr [31:0] $end
$var wire 32 ^ outAddr [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 _ inAddr [31:0] $end
$var wire 32 ` outContent [31:0] $end
$upscope $end
$scope module ifid $end
$var wire 32 a addr4 [31:0] $end
$var wire 1 L clk $end
$var wire 32 b ins [31:0] $end
$var wire 64 c out [63:0] $end
$var wire 1 W rst $end
$var reg 64 d con [63:0] $end
$upscope $end
$scope module controlunit $end
$var wire 1 e clk $end
$var wire 6 f inCode [5:0] $end
$var wire 10 g outCode [9:0] $end
$var reg 10 h result [9:0] $end
$upscope $end
$scope module signext $end
$var wire 16 i in1 [15:0] $end
$var wire 32 j out [31:0] $end
$var wire 16 k temp [15:0] $end
$upscope $end
$scope module regHeap $end
$var wire 1 L clk $end
$var wire 5 l readReg1 [4:0] $end
$var wire 5 m readReg2 [4:0] $end
$var wire 32 n reg1Data [31:0] $end
$var wire 32 o reg2Data [31:0] $end
$var wire 1 p regWrite $end
$var wire 32 q writeData [31:0] $end
$var wire 5 r writeReg [4:0] $end
$upscope $end
$scope module idex $end
$var wire 32 s add4 [31:0] $end
$var wire 1 L clk $end
$var wire 4 t ex [3:0] $end
$var wire 3 u m [2:0] $end
$var wire 5 v rd [4:0] $end
$var wire 32 w readData1 [31:0] $end
$var wire 32 x readData2 [31:0] $end
$var wire 1 W rst $end
$var wire 5 y rt [4:0] $end
$var wire 32 z signExt [31:0] $end
$var wire 2 { wb [1:0] $end
$var reg 147 | out [146:0] $end
$upscope $end
$scope module addBranch $end
$var wire 32 } inAddr_add [31:0] $end
$var wire 32 ~ inAddr_sl2 [31:0] $end
$var wire 32 !" outAddr [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !"
bx ~
bx }
bx |
b1 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b110 t
b0 s
bz r
bz q
1p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b100100010 h
b100100010 g
b0 f
ze
b0 d
b0 c
b10001101000010010000000000000100 b
b11000000000100 a
b10001101000010010000000000000100 `
b11000000000000 _
b11000000000100 ^
b11000000000000 ]
b11000000000000 \
b11000000000000 [
bz Z
bz Y
bz X
0W
b0 V
b0 U
b11000000000100 T
b11000000000000 S
bz R
b10001101000010010000000000000100 Q
b0 P
bx O
b0 N
b100100010 M
1L
bx K
1J
zI
bz H
bz G
bz F
zE
bz D
bz C
bz B
b0 A
b0zzzzzzzzzzzzzzzzzzzzzzzzzzzz00 @
bz ?
bz >
b0 =
z<
bz ;
z:
bz 9
b0 8
z7
bz 6
z5
z4
bz 3
bz 2
bz 1
bx 0
z/
z.
bz -
z,
b0 +
bz *
z)
bz (
1'
b0 &
b0 %
bz $
bz #
bz "
z!
$end
#1
bz [
#10
0J
0L
#20
b1000 t
b10 u
b11 {
b0 ~
b0 K
b0 !"
b0 }
b11110000 h
b11110000 M
b11110000 g
b10000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 |
b10000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 O
b1001 y
b11000000000100 s
b1001 m
b1000 l
b100 i
b100 N
b100 j
b100 z
b100011 f
b1100000000010010001101000010010000000000000100 d
b1100000000010010001101000010010000000000000100 P
b1100000000010010001101000010010000000000000100 c
1J
1L
#30
0J
0L
#40
b10000 ~
b11000000000100 }
b11000000010100 K
b11000000010100 !"
b110101000000000000000000000110000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100100000 |
b110101000000000000000000000110000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100100000 O
1J
1L
#50
0J
0L
#60
1J
1L
#70
0J
0L
#80
1J
1L
#90
0J
0L
#100
1J
1L
#110
0J
0L
#120
1J
1L
#130
0J
0L
#140
1J
1L
#150
0J
0L
#160
1J
1L
#170
0J
0L
#180
1J
1L
#190
0J
0L
#200
1J
1L
#210
0J
0L
#220
1J
1L
#230
0J
0L
#240
1J
1L
#250
0J
0L
#260
1J
1L
#270
0J
0L
#280
1J
1L
#290
0J
0L
#300
1J
1L
#310
0J
0L
#320
1J
1L
#330
0J
0L
#340
1J
1L
#350
0J
0L
#360
1J
1L
#370
0J
0L
#380
1J
1L
#390
0J
0L
#400
1J
1L
#410
0J
0L
#420
1J
1L
#430
0J
0L
#440
1J
1L
#450
0J
0L
#460
1J
1L
#470
0J
0L
#480
1J
1L
#490
0J
0L
#500
1J
1L
